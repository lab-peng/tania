{"version":3,"sources":["Table.js","Form.js","App.js","reportWebVitals.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","characters","map","row","index","name","job","onClick","removeCharacter","Table","Form","handleChange","event","target","value","setState","onFormSubmit","preventDefault","handleSubmit","state","initialState","this","onSubmit","htmlFor","type","id","required","onChange","Component","App","filter","character","i","className","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAEMA,EAAc,WAChB,OACI,gCACI,+BACI,sCACA,qCACA,8CAMVC,EAAY,SAACC,GACf,IACMC,EADaD,EAAME,cAAcC,WACfC,KAAI,SAACC,EAAKC,GAC9B,OACI,+BACI,6BAAKD,EAAIE,OACT,6BAAKF,EAAIG,MACT,6BACI,wBAAQC,QAAS,kBAAMT,EAAMU,gBAAgBJ,IAA7C,sBAJCA,MAUjB,OAAO,gCAAQL,KAaJU,EAVD,SAACX,GACX,IAAQE,EAAmCF,EAAnCE,cAAeQ,EAAoBV,EAApBU,gBACnB,OACI,kCACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAWR,cAAeA,EAAeQ,gBAAiBA,Q,OCwB3DE,E,kDAzDX,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IASVa,aAAe,SAACC,GACZ,MAAsBA,EAAMC,OAArBR,EAAP,EAAOA,KAAMS,EAAb,EAAaA,MAEb,EAAKC,SAAL,eACKV,EAAOS,KAdG,EAkBnBE,aAAe,SAACJ,GACZA,EAAMK,iBAEN,EAAKnB,MAAMoB,aAAa,EAAKC,OAC7B,EAAKJ,SAAS,EAAKK,eAnBnB,EAAKA,aAAe,CAChBf,KAAM,GACNC,IAAK,IAET,EAAKa,MAAQ,EAAKC,aAPH,E,0CAyBnB,WACI,MAAoBC,KAAKF,MAAlBd,EAAP,EAAOA,KAAMC,EAAb,EAAaA,IAEb,OACI,uBAAMgB,SAAUD,KAAKL,aAArB,UACI,uBAAOO,QAAQ,OAAf,kBACA,uBACAC,KAAK,OACLnB,KAAK,OACLoB,GAAG,OACHX,MAAOT,EACPqB,UAAQ,EACRC,SAAUN,KAAKV,eAEf,uBAAOY,QAAQ,MAAf,iBACA,uBACAC,KAAK,OACLnB,KAAK,MACLoB,GAAG,MACHX,MAAOR,EACPoB,UAAQ,EACRC,SAAUN,KAAKV,eAGf,mD,GAlDGiB,aCIbC,E,4MACJV,MAAQ,CACNlB,WAAa,I,EAKfO,gBAAkB,SAACJ,GACjB,IAAOH,EAAc,EAAKkB,MAAnBlB,WAEP,EAAKc,SAAS,CACZd,WAAYA,EAAW6B,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAM5B,Q,EAKnBc,aAAe,SAACa,GACd,EAAKhB,SAAS,CAACd,WAAW,GAAD,mBAAM,EAAKkB,MAAMlB,YAAjB,CAA6B8B,O,4CAGxD,WACE,IAAM9B,EAAaoB,KAAKF,MAExB,OACE,sBAAKc,UAAU,YAAf,UACE,cAAC,EAAD,CAAOjC,cAAeC,EAAYO,gBAAiBa,KAAKb,kBACxD,cAAC,EAAD,CAAMU,aAAcG,KAAKH,sB,GA3BfgB,IAAMN,WAiCTC,IC3BAM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bf97023c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TableHeader = () => { \r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Name</th>\r\n                <th>Job</th>\r\n                <th>Action</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nconst TableBody = (props) => { \r\n    const characters = props.characterData.characters;\r\n    const rows = characters.map((row, index) => {\r\n        return (\r\n            <tr key={index}>\r\n                <td>{row.name}</td>\r\n                <td>{row.job}</td>\r\n                <td>\r\n                    <button onClick={() => props.removeCharacter(index)}>Hide</button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n    return <tbody>{rows}</tbody>;\r\n}\r\n\r\nconst Table = (props) => {\r\n    const { characterData, removeCharacter } = props;\r\n        return (\r\n            <table>\r\n                <TableHeader />\r\n                <TableBody characterData={characterData} removeCharacter={removeCharacter} />\r\n            </table>\r\n        );\r\n}\r\n\r\nexport default Table;\r\n","import React, {Component} from 'react';\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.initialState = {\r\n            name: '',\r\n            job: ''\r\n        };\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const {name, value} = event.target;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        \r\n        this.props.handleSubmit(this.state);\r\n        this.setState(this.initialState);\r\n    }\r\n\r\n    render () {\r\n        const {name, job} = this.state;\r\n\r\n        return (\r\n            <form onSubmit={this.onFormSubmit}>\r\n                <label htmlFor=\"name\">Name</label>\r\n                <input \r\n                type=\"text\"\r\n                name=\"name\"\r\n                id=\"name\"\r\n                value={name}\r\n                required\r\n                onChange={this.handleChange}/>\r\n\r\n                <label htmlFor=\"job\">Job</label>\r\n                <input \r\n                type=\"text\"\r\n                name=\"job\"\r\n                id=\"job\"\r\n                value={job}\r\n                required\r\n                onChange={this.handleChange} />\r\n\r\n                {/* <input type=\"button\" value=\"Submit\" /> */}\r\n                <button>\r\n                    Submit\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","// import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport Table from './Table';\nimport Form from './Form';\n\nclass App extends React.Component {\n  state = {\n    characters : [\n\n    ]\n  };\n\n  removeCharacter = (index) => {\n    const {characters} = this.state;\n\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index;\n      }),\n    })\n  }\n\n  handleSubmit = (character) => {\n    this.setState({characters: [...this.state.characters, character]})\n  }\n  \n  render() {\n    const characters = this.state;\n\n    return (\n      <div className=\"container\">\n        <Table characterData={characters} removeCharacter={this.removeCharacter} />\n        <Form handleSubmit={this.handleSubmit} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}